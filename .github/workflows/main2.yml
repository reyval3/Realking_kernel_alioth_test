name: Build and Release Kernel

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up environment variables
        run: |
          echo "MAIN_DIR=${{ github.workspace }}" >> $GITHUB_ENV
          echo "KERNEL_DIR=${{ github.workspace }}/kernel" >> $GITHUB_ENV
          echo "ZIMAGE_DIR=${{ github.workspace }}/kernel/out/arch/arm64/boot" >> $GITHUB_ENV
          echo "BUILD_START=$(date +"%s")" >> $GITHUB_ENV
          echo "CLANG_DIR=${{ github.workspace }}/clang" >> $GITHUB_ENV
          echo "DEVICE=alioth" >> $GITHUB_ENV
          echo "KERNEL_DEFCONFIG=alioth_defconfig" >> $GITHUB_ENV
          echo "DEVICE_NAME1=alioth" >> $GITHUB_ENV
          echo "DEVICE_NAME2=aliothin" >> $GITHUB_ENV
          echo "IS_SLOT_DEVICE=1" >> $GITHUB_ENV
          echo "VENDOR_BOOT_LINES_REMOVED=0" >> $GITHUB_ENV
          
      - name: Download Clang if not found
        run: |
          if [ ! -d "$CLANG_DIR" ]; then
            echo "Clang directory not found. Cloning from GitHub."
            echo "Choose which Clang to use:"
            echo "1. ZyC Stable"
            echo "2. WeebX Stable"
            read -p "Enter the number of your choice: " clang_choice
            if [ "$clang_choice" = "1" ]; then
              wget "$(curl -s https://raw.githubusercontent.com/v3kt0r-87/Clang-Stable/main/clang-zyc.txt)" -O "zyc-clang.tar.gz"
              rm -rf clang && mkdir clang && tar -xvf zyc-clang.tar.gz -C clang && rm -rf zyc-clang.tar.gz
            elif [ "$clang_choice" = "2" ]; then
              wget "$(curl -s https://raw.githubusercontent.com/v3kt0r-87/Clang-Stable/main/clang-weebx.txt)" -O "weebx-clang.tar.gz"
              rm -rf clang && mkdir clang && tar -xvf weebx-clang.tar.gz -C clang && rm -rf weebx-clang.tar.gz
            else
              echo "Invalid choice. Exiting..."
              exit 1
            fi
          fi

      - name: Set up Clang toolchain
        run: |
          export PATH="$MAIN/clang/bin:$PATH"
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_COMPILER_STRING="$($MAIN/clang/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"
          
      - name: Build Kernel
        run: |
          echo "Building kernel for device ${{ env.DEVICE }}"
          # Choose kernel config based on device
          if [ "${{ env.DEVICE }}" = "alioth" ]; then
            KERNEL_DEFCONFIG=alioth_defconfig
            DEVICE_NAME1="alioth"
            DEVICE_NAME2="aliothin"
            IS_SLOT_DEVICE=1
            VENDOR_BOOT_LINES_REMOVED=0
          fi

          # Backup anykernel.sh and modify it
          cp -p anykernel/anykernel.sh anykernel/anykernel.sh.bak
          sed -i "s/device.name1=.*/device.name1=${DEVICE_NAME1}/" anykernel/anykernel.sh
          sed -i "s/device.name2=.*/device.name2=${DEVICE_NAME2}/" anykernel/anykernel.sh
          sed -i "s/is_slot_device=.*/is_slot_device=${IS_SLOT_DEVICE}/" anykernel/anykernel.sh

          if [ "$VENDOR_BOOT_LINES_REMOVED" -eq 1 ]; then
            sed -i '/## vendor_boot shell variables/,/## end vendor_boot install/d' anykernel/anykernel.sh
          fi

          # Run kernel build
          make $KERNEL_DEFCONFIG O=out CC=clang
          make -j$(nproc --all) O=out CC=clang ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- NM=llvm-nm OBJDUMP=llvm-objdump STRIP=llvm-strip

      - name: Prepare Kernel Build Artifacts
        run: |
          TIME="$(date "+%Y%m%d-%H%M%S")"
          mkdir -p tmp
          cp -fp $ZIMAGE_DIR/Image.gz tmp
          cp -fp $ZIMAGE_DIR/dtbo.img tmp
          cp -fp $ZIMAGE_DIR/dtb tmp
          cp -rp ./anykernel/* tmp
          cd tmp
          7za a -mx9 tmp.zip *
          cd ..
          rm *.zip
          cp -fp tmp/tmp.zip RealKing-${{ env.DEVICE }}-${{ env.CHOICE }}-${TIME}.zip
          rm -rf tmp
          echo $TIME

      - name: Restore anykernel.sh
        run: |
          mv -f anykernel/anykernel.sh.bak anykernel/anykernel.sh

      - name: Revert modifications
        run: |
          git checkout arch/arm64/boot/dts/vendor/qcom/dsi-panel-* &>/dev/null

      - name: Create a GitHub release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0-${{ env.DEVICE }}-${{ env.BUILD_START }}
          release_name: "Release for ${{ env.DEVICE }} ${BUILD_START}"
          body: "Kernel release for ${{ env.DEVICE }}"

      - name: Upload Kernel Build to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0-${{ env.DEVICE }}-${{ env.BUILD_START }}
          asset_path: RealKing-${{ env.DEVICE }}-${{ env.CHOICE }}-${BUILD_START}.zip
          asset_name: RealKing-${{ env.DEVICE }}-${{ env.CHOICE }}-${BUILD_START}.zip
          asset_content_type: application/zip
