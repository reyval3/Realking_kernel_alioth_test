name: Build Kernel for Alioth

on:
  push:
    branches:
      - main  # Change to your default branch
  workflow_dispatch:

env:
  MAIN_DIR: ${{ github.workspace }}
  KERNEL_DIR: ${{ github.workspace }}/kernel
  ZIMAGE_DIR: ${{ github.workspace }}/kernel/out/arch/arm64/boot
  CLANG_DIR: ${{ github.workspace }}/clang
  DEVICE: alioth  # Only for Alioth device
  KERNEL_DEFCONFIG: alioth_defconfig  # Alioth configuration
  DEVICE_NAME1: alioth
  DEVICE_NAME2: aliothin
  IS_SLOT_DEVICE: 1
  VENDOR_BOOT_LINES_REMOVED: 0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Build Environment
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu lld llvm

      - name: Clone Clang Compiler
        run: |
          if [ ! -d "$CLANG_DIR" ]; then
            echo "Cloning Clang Compiler..."
            wget "$(curl -s https://raw.githubusercontent.com/v3kt0r-87/Clang-Stable/main/clang-zyc.txt)" -O "zyc-clang.tar.gz"
            rm -rf clang && mkdir clang && tar -xvf zyc-clang.tar.gz -C clang && rm -rf zyc-clang.tar.gz
          fi

      - name: Build Kernel
        run: |
          export PATH="$CLANG_DIR/bin:$PATH"
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          cd $KERNEL_DIR
          
          # Verify Config File
          if [ ! -f "arch/arm64/configs/$KERNEL_DEFCONFIG" ]; then
            echo "ERROR: Kernel config file not found!"
            exit 1
          fi

          # Start Build
          make ARCH=arm64 O=out $KERNEL_DEFCONFIG
          make -j$(nproc --all) ARCH=arm64 O=out CC=clang CROSS_COMPILE=aarch64-linux-gnu- NM=llvm-nm OBJDUMP=llvm-objdump STRIP=llvm-strip

      - name: Package Kernel
        run: |
          mkdir -p tmp
          cp -fp $ZIMAGE_DIR/Image.gz tmp
          cp -fp $ZIMAGE_DIR/dtbo.img tmp
          cp -fp $ZIMAGE_DIR/dtb tmp
          cp -rp ./anykernel/* tmp
          
          cd tmp
          7za a -mx9 tmp.zip *
          cd ..
          
          TIME="$(date "+%Y%m%d-%H%M%S")"
          cp -fp tmp/tmp.zip RealKing-$DEVICE-$TIME.zip
          rm -rf tmp

      - name: Upload Kernel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: RealKing-Kernel
          path: RealKing-${{ env.DEVICE }}-${{ env.CHOICE }}-${TIME}.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: RealKing-${{ env.DEVICE }}-${{ env.CHOICE }}-${TIME}.zip
          tag_name: "release-${{ github.run_number }}"
          name: "Kernel Release ${{ github.run_number }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
