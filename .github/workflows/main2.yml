name: Build Kernel for Alioth

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Kernel for Alioth
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up environment variables
      run: |
        echo "MAIN_DIR=${{ github.workspace }}" >> $GITHUB_ENV
        echo "KERNEL_DIR=${{ github.workspace }}/kernel" >> $GITHUB_ENV
        echo "ZIMAGE_DIR=${{ github.workspace }}/kernel/out/arch/arm64/boot" >> $GITHUB_ENV
        echo "CLANG_DIR=${{ github.workspace }}/clang" >> $GITHUB_ENV
        echo "DEVICE=alioth" >> $GITHUB_ENV
        echo "KERNEL_DEFCONFIG=alioth_defconfig" >> $GITHUB_ENV
        echo "DEVICE_NAME1=alioth" >> $GITHUB_ENV
        echo "DEVICE_NAME2=aliothin" >> $GITHUB_ENV
        echo "IS_SLOT_DEVICE=1" >> $GITHUB_ENV
        echo "VENDOR_BOOT_LINES_REMOVED=0" >> $GITHUB_ENV
        echo "BUILD_START=$(date +"%s")" >> $GITHUB_ENV

    - name: Validate Device Choice
      run: |
        if [ "$DEVICE" != "alioth" ]; then
          echo "This workflow is only for the alioth device. Exiting."
          exit 1
        fi

    - name: Set up Clang Compiler
      run: |
        if [ ! -d "$CLANG_DIR" ]; then
          echo "No clang compiler found ... Cloning from GitHub"
          echo "Choose which Clang to use:"
          echo "1. ZyC Stable"
          echo "2. WeebX Stable"
          read -p "Enter the number of your choice: " clang_choice
          if [ "$clang_choice" = "1" ]; then
            wget "$(curl -s https://raw.githubusercontent.com/v3kt0r-87/Clang-Stable/main/clang-zyc.txt)" -O "zyc-clang.tar.gz"
            rm -rf clang && mkdir clang && tar -xvf zyc-clang.tar.gz -C clang && rm -rf zyc-clang.tar.gz
          elif [ "$clang_choice" = "2" ]; then
            wget "$(curl -s https://raw.githubusercontent.com/v3kt0r-87/Clang-Stable/main/clang-weebx.txt)" -O "weebx-clang.tar.gz"
            rm -rf clang && mkdir clang && tar -xvf weebx-clang.tar.gz -C clang && rm -rf weebx-clang.tar.gz
          else
            echo "Invalid choice. Exiting..."
            exit 1
          fi
        fi

    - name: Configure Kernel
      run: |
        cd $KERNEL_DIR
        make $KERNEL_DEFCONFIG O=out CC=clang

    - name: Build Kernel
      run: |
        cd $KERNEL_DIR
        make -j$(nproc --all) O=out \
          CC=clang \
          ARCH=arm64 \
          CROSS_COMPILE=aarch64-linux-gnu- \
          NM=llvm-nm \
          OBJDUMP=llvm-objdump \
          STRIP=llvm-strip

    - name: Package Kernel
      run: |
        cd $KERNEL_DIR
        TIME=$(date "+%Y%m%d-%H%M%S")
        mkdir -p tmp
        cp -fp $ZIMAGE_DIR/Image.gz tmp
        cp -fp $ZIMAGE_DIR/dtbo.img tmp
        cp -fp $ZIMAGE_DIR/dtb tmp
        cp -rp ./anykernel/* tmp
        cd tmp
        7za a -mx9 tmp.zip *
        cd ..
        rm *.zip
        cp -fp tmp/tmp.zip RealKing-${{ env.DEVICE }}-${{ env.CHOICE }}-${TIME}.zip
        rm -rf tmp

    - name: Create GitHub Release
      id: create_release
      uses: gh-actions/create-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v${{ github.run_number }}
        release_name: "Kernel Build v${{ github.run_number }}"
        body: "This release contains the compiled kernel for ${{ env.DEVICE }}."

    - name: Upload Kernel Build to Release
      uses: gh-actions/upload-release-asset@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: RealKing-${{ env.DEVICE }}-${{ env.CHOICE }}-${TIME}.zip
        asset_name: RealKing-${{ env.DEVICE }}-${{ env.CHOICE }}-${TIME}.zip
        asset_content_type: application/zip

    - name: Clean up
      run: |
        cd $KERNEL_DIR
        mv -f anykernel/anykernel.sh.bak anykernel/anykernel.sh
        git checkout arch/arm64/boot/dts/vendor/qcom/dsi-panel-* &>/dev/null
